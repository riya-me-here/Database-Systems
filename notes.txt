1) The Structured Query Language (SQL)

1) SQL Command Types
• DDL: Data Definition Language 
  Define admissible database content (schema)
• DML: Data Manipulation Language 
  Change and retrieve database content
• TCL: Transaction Control Language 
  Groups SQL commands (transactions)
• DCL: Data Control Language 
  Assign data access rights
  
FOREIGN key : It is a feild in one table that refers to the primary key in another table

Schema Definition in SQL
• CREATE TABLE <table> (<table-def>)
 - <table> is the table name
 -<table-def> is comma-separated column definitions
 -Column definition is of form <col-name> <col-type>
 
 DML
 insert,
 delete,
 update,
 analyze.
 
1) Inserting Data
• Inserting one (fully specified) row into a table:
• INSERT INTO <table> VALUES (<value-list>)
• Inserting one (partially specified) row into a table:
• INSERT INTO <table> (<column-list>) VALUES (<value-list>)

2) Deleting Data
• Deleting rows from a table that satisfy condition:
• DELETE FROM <table> WHERE <condition>
• <condition> specifies Boolean predicate
• E.g., (in)equalities between columns

3) Updating Data
• Updating specific rows and columns to new value:
• UPDATE <table>
  SET <column> = <value>
  WHERE <condition>
• Changes rows satisfying <condition> by writing <value> in <column>

Simple SQL Queries

• An SQL query describes a new relation to generate
• Simple SQL queries consist of three parts
• SELECT: describes columns of relation to generate
• FROM: describes source relations and how to match
• WHERE: defines conditions result rows must satisfy 

Simple Query Format

• SELECT <columns> FROM <table1> JOIN <table2> ON (<join-pred>) ...WHERE <where-pred>
• <columns> is comma-separated list of columns
• <table1> and <table2> are database relations
• <join-pred> is condition defining matching tuples pairs
• <where-pred> are additional conditions

Composite Predicates -
• Logical conjunction via AND keyword
• Logical disjunction via OR keyword
• Negation via NOT keyword
• E.g., Cname = 'CS4320' OR Cname = 'CS5320'

Diverse Select Clauses
• Shortcuts for selecting multiple columns
    -> * selects all columns
    -> <table>.* selects all columns from <table>
• Can use arithmetic expressions in select clause
    -> E.g., SELECT 3 * (<column1> + <column2>) 
• Can assign new names for output columns

Join Syntax Alternatives
• Simply specify names of columns that appear in multiple tables
   -> <table1> JOIN <table2> USING (<column>)
   -> Abbreviates <table1> JOIN <table2> ON (<table1>.<column> = <table2>.<column>)
• "Natural joins" match values in columns with same name
   -> <table1> NATURAL JOIN <table2>
   -> Introduces equality conditions between columns of same name
• No join keyword: FROM <table1>, <table2> WHERE <join-condition>

Aggregation Queries
• Can calculate aggregates over all rows of result relation
• SQL Aggregates: COUNT, SUM, AVG, MIN, MAX
   SUM, AVG, MIN, MAX: numerical expression parameter
   COUNT(*) for counting rows in result relation
   COUNT(<column>) counts rows with value in <column>
   COUNT(DISTINCT <column>) counts number of distinct values in <column> in result relation
   
Aggregation by Group
• Common: want aggregates for multiple data subsets
• Use SQL GROUP-BY clause to define data subsets
• GROUP BY <column-list> - distinguish data subsets 
based on their values in specified columns

Syntax for Ordering
• ORDER BY <order-item-list>
• <order-item> : <column> <direction>
• <direction> : either ASC or DESC
• Orders result rows by values in order items
• Prioritize order items that appear earlier in list
• Applied after grouping (for group-by queries)
  -> Items must have unique value per group
  
Limiting Output Size
• Limit <Number> : only shows first <Number> result rows

Unknown Values
• Unknown values are called NULL values in SQL
• SQL uses Ternary (i.e., Three-Valued Logic)
  Outcome may be true, false, or unknown
• Check for corresponding outcome
  <expression> = TRUE
  <expression> = FALSE
  <expression> IS NULL (not: "= NULL")
• WHERE condition evaluates to NULL - no result row!

Joins with Unknowns I
• Standard join keeps only matching row pairs
• Eliminates rows without matching rows in other table
• Sometimes we want to keep rows regardless
• Can do that with OUTER JOINs
• Fills up fields in missing row with NULL values

Joins with Unknowns II
• Keep each row in left table (plus standard join result):
  <table-1> LEFT OUTER JOIN <table-2> ON ...
• Keep each row in right table (plus standard result):
  <table-1> RIGHT OUTER JOIN <table-2> ON ...
• Keep rows in both tables (plus standard result):
  <table-1> FULL OUTER JOIN <table-2> ON
  
 Set Operations
• Union result tuples from two queries
  <query-1> UNION <query-2> : eliminates duplicates
  <query-1> UNION ALL <query-2> : keep duplicates
• Intersect results from two queries
  <query-1> INTERSECT <query-2>
• Set difference between queries
  <query-1> EXCEPT <query-2>
• Results from <query-1> and <query-2> must be union-compatible


2) DATA STORAGE

The Memory Hierarchy -FASTER ACCESS  
Registers
CPU Cache
Main Memory
Flash/USB Memory
Hard Disk
Tape Backup          -HIGHER CAPACITY

3) TREE INDEXES















